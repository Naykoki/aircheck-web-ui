import streamlit as st
import pandas as pd
import random
from datetime import datetime, timedelta
from io import BytesIO
from meteostat import Point, Hourly

# ---------------- CONFIG ----------------
st.set_page_config(page_title="AirCheck TH", layout="wide")
st.image("logo.png", width=120)
st.title("üåç AirCheck TH - ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏≥‡∏•‡∏≠‡∏á (‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)")

# ---------------- Login ----------------
if "user" not in st.session_state:
    st.session_state.user = None
    st.session_state.role = None

with st.sidebar:
    st.header("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    username = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    login_clicked = st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    if login_clicked:
        if username.strip() == "":
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            st.stop()
        st.session_state.user = username
        st.session_state.role = "admin" if username.lower() == "siwanon" else "user"
        st.experimental_rerun()  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å rerun ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô


if not st.session_state.user:
    st.stop()

st.sidebar.success(f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö: {st.session_state.user} ({st.session_state.role})")

# ---------------- Province ----------------
province = st.selectbox("üìç ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á", [
    "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£", "‡∏£‡∏∞‡∏¢‡∏≠‡∏á", "‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤", "‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ", "‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ", "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ", "‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ"
])

province_coords = {
    "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£": (13.7563, 100.5018),
    "‡∏£‡∏∞‡∏¢‡∏≠‡∏á": (12.6814, 101.2770),
    "‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤": (14.3532, 100.5689),
    "‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ": (14.5289, 100.9105),
    "‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ": (13.5360, 99.8171),
    "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ": (13.3611, 100.9847),
    "‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ": (12.6112, 102.1035)
}

# ---------------- USER INPUT ----------------
st.markdown("### ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô")
start_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)", datetime(2025, 7, 15))
num_days = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô (1‚Äì8)", 1, 8, 1)

if start_date > datetime.now().date():
    st.warning("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
    st.stop()

factory_direction = st.selectbox("‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô", ["NE", "NW", "SE", "SW"])

st.markdown("### üèûÔ∏è ‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°")
near_road = st.checkbox("‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏ô‡∏ô")
near_factory = st.checkbox("‡πÉ‡∏Å‡∏•‡πâ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô")

params = st.multiselect("üìå ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì", [
    "NO", "NO2", "NOx", "SO2", "CO", "O3", "WS", "WD", "Temp", "RH", "Pressure"
], default=["NO", "NO2", "NOx", "WS", "WD", "Temp", "RH", "Pressure"])

sit_options = {
    "‡πÅ‡∏î‡∏î": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡πÅ‡∏î‡∏î‡∏≠‡πà‡∏≠‡∏ô", "‡πÅ‡∏î‡∏î‡πÅ‡∏£‡∏á"],
    "‡∏•‡∏°": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏ô‡∏¥‡πà‡∏á/‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏°", "‡πÄ‡∏ö‡∏≤", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡πÅ‡∏£‡∏á"],
    "‡∏Å‡∏•‡∏¥‡πà‡∏ô": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô"],
    "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏´‡∏ô‡∏≤‡∏ß‡∏à‡∏±‡∏î", "‡∏´‡∏ô‡∏≤‡∏ß", "‡πÄ‡∏¢‡πá‡∏ô", "‡∏õ‡∏Å‡∏ï‡∏¥", "‡∏£‡πâ‡∏≠‡∏ô", "‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î"],
    "‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™", "‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô", "‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡∏Å"],
    "‡∏ù‡∏ô": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏ï‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", "‡∏ï‡∏Å‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å"],
    "‡∏≠‡∏∑‡πà‡∏ô‡πÜ": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏£‡∏ñ‡πÄ‡∏¢‡∏≠‡∏∞", "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏≤‡∏Ç‡∏¢‡∏∞"]
}

st.markdown("### üå§Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
day_situations = []
for i in range(num_days):
    with st.expander(f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i+1}"):
        sit = {}
        wind_dir = st.selectbox(f"‡∏ó‡∏¥‡∏®‡∏•‡∏° (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i+1})", ["NE", "NW", "SE", "SW"], key=f"wd_{i}")
        sit["‡∏ó‡∏¥‡∏®‡∏•‡∏°"] = wind_dir
        for key, opts in sit_options.items():
            sit[key] = st.selectbox(f"{key} (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i+1})", opts, key=f"{key}_{i}")
        day_situations.append(sit)

# ---------------- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏≤‡∏Å Meteostat ----------------
def get_hourly_meteostat(province, start_date, num_days):
    lat, lon = province_coords.get(province, (13.7563, 100.5018))
    location = Point(lat, lon)

    start = datetime.combine(start_date, datetime.min.time())
    end = start + timedelta(days=num_days) - timedelta(seconds=1)

    data = Hourly(location, start, end)
    data = data.fetch()

    data["wspd"].fillna(2.5, inplace=True)
    data["wdir"].fillna(90, inplace=True)
    data["temp"].fillna(27.0, inplace=True)
    data["rhum"].fillna(65.0, inplace=True)

    return data

hourly_data = get_hourly_meteostat(province, start_date, num_days)

# ---------------- ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á ----------------
def simulate(var, sit, hour, wind_dir, ref):
    scale_factor_ws = 0.7  # ‡∏•‡∏î‡∏ó‡∏≠‡∏ô WS ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 70%
    base = ref if ref is not None else (random.uniform(2, 6) if var not in ["Temp", "RH", "WS"] else 27)
    multiplier = 1.0
    add = 0.0

    if sit["‡∏ù‡∏ô"] in ["‡∏ï‡∏Å‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å"]:
        multiplier *= 0.6
        add -= 1
    elif sit["‡∏ù‡∏ô"] == "‡∏ï‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢":
        multiplier *= 0.85
    if sit["‡πÅ‡∏î‡∏î"] == "‡πÅ‡∏î‡∏î‡πÅ‡∏£‡∏á":
        add += 4
        multiplier *= 1.1
    elif sit["‡πÅ‡∏î‡∏î"] == "‡πÅ‡∏î‡∏î‡∏≠‡πà‡∏≠‡∏ô":
        add += 2
    if sit["‡∏•‡∏°"] == "‡πÅ‡∏£‡∏á":
        add += 3 if var == "WS" else 0
        multiplier *= 0.7
    elif sit["‡∏•‡∏°"] == "‡∏ô‡∏¥‡πà‡∏á/‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏°":
        multiplier *= 1.3
        add -= 0.5
    if sit["‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥"] == "‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î" and var == "Temp":
        add += 4
    if sit["‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥"] == "‡∏´‡∏ô‡∏≤‡∏ß‡∏à‡∏±‡∏î" and var == "Temp":
        add -= 4
    if sit["‡∏Å‡∏•‡∏¥‡πà‡∏ô"] == "‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô" and var in ["NO2", "SO2", "CO"]:
        multiplier *= 1.2
    if sit["‡∏≠‡∏∑‡πà‡∏ô‡πÜ"] == "‡∏£‡∏ñ‡πÄ‡∏¢‡∏≠‡∏∞" and var in ["NO", "NO2", "CO"]:
        multiplier *= 1.4
    if sit["‡∏≠‡∏∑‡πà‡∏ô‡πÜ"] == "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏≤‡∏Ç‡∏¢‡∏∞" and var in ["CO", "O3", "SO2"]:
        multiplier *= 1.3
    if near_road and var in ["NO", "NO2", "CO"]:
        multiplier *= 1.25
    if near_factory and wind_dir == factory_direction and var in ["NO2", "SO2"]:
        multiplier *= 1.5

    if var == "NO":
        return round(base * multiplier + add + random.uniform(0.5, 2.5), 2)
    if var == "NO2":
        return round(min(20, base * multiplier + add + random.uniform(0.8, 2.8)), 2)
    if var == "NOx":
        return None
    if var == "WS":
        val = base + add + random.uniform(-1.0, 1.5)
        scaled_val = val * scale_factor_ws
        # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö WS ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0.5 - 4.0 m/s
        return round(min(max(scaled_val, 0.5), 4.0), 2)
    if var == "WD":
        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô WD ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏á‡∏®‡∏≤ ‡πÉ‡∏ä‡πâ ref ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        return ref if ref is not None else 90
    if var == "Temp":
        return round(base + add + random.uniform(-2, 2), 2)
    if var == "RH":
        return round(min(100, base + add + random.uniform(-8, 10)), 2)
    if var == "Pressure":
        return round(1010 + random.uniform(-5, 5), 2)
    if var == "SO2":
        return round(base * multiplier + add + random.uniform(0.5, 2.5), 2)
    if var == "CO":
        return round(base * multiplier + add + random.uniform(0.1, 1.2), 2)
    if var == "O3":
        return round(30 + add + random.uniform(5, 25), 2)
    return round(base * multiplier + add, 2)

# ---------------- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ----------------
if st.button("üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel"):
    records = []
    for i in range(num_days):
        date = start_date + timedelta(days=i)
        sit = day_situations[i]
        for hour in range(24):
            time_dt = datetime.combine(date, datetime.min.time()) + timedelta(hours=hour)
            time_str = time_dt.strftime("%H:%M:%S")

            try:
                ref_row = hourly_data.loc[time_dt]
            except KeyError:
                ref_row = None

            wind_dir = sit["‡∏ó‡∏¥‡∏®‡∏•‡∏°"]

            row = {"Date": date.strftime("%Y-%m-%d"), "Time": time_str}

            ref_WS = ref_row["wspd"] if ref_row is not None else None
            ref_WD = ref_row["wdir"] if ref_row is not None else None
            ref_Temp = ref_row["temp"] if ref_row is not None else None
            ref_RH = ref_row["rhum"] if ref_row is not None else None

            no = simulate("NO", sit, hour, wind_dir, None) if "NO" in params else None
            no2 = simulate("NO2", sit, hour, wind_dir, None) if "NO2" in params else None
            row["NO"], row["NO2"] = no, no2
            row["NOx"] = no + no2 if "NOx" in params and no and no2 else None

            for var in ["WS", "WD", "Temp", "RH", "Pressure", "SO2", "CO", "O3"]:
                if var in params:
                    if var == "WS":
                        ref = ref_WS
                    elif var == "WD":
                        ref = ref_WD
                    elif var == "Temp":
                        ref = ref_Temp
                    elif var == "RH":
                        ref = ref_RH
                    else:
                        ref = None
                    row[var] = simulate(var, sit, hour, wind_dir, ref)

            records.append(row)

    df = pd.DataFrame(records)
    st.success("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
    st.dataframe(df.head(48))

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° DataFrame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Excel export
    df_env = df[[c for c in ["Date", "Time", "WS", "WD", "Temp", "RH", "Pressure"] if c in df.columns]]
    df_nox = df[["Date", "Time", "NO", "NO2", "NOx"]] if "NO" in df.columns else pd.DataFrame()

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Reference Data ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ Excel sheet
    df_ref = hourly_data.reset_index()[["time", "wspd", "wdir", "temp", "rhum"]]
    df_ref.rename(columns={
        "time": "DateTime",
        "wspd": "WS (m/s)",
        "wdir": "WD (degree)",
        "temp": "Temperature (¬∞C)",
        "rhum": "Relative Humidity (%)"
    }, inplace=True)

    output = BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        if not df_nox.empty:
            df_nox.to_excel(writer, index=False, sheet_name="NOx Group")
        if not df_env.empty:
            df_env.to_excel(writer, index=False, sheet_name="ENV")
        for p in ["SO2", "CO", "O3"]:
            if p in df.columns:
                df[["Date", "Time", p]].to_excel(writer, index=False, sheet_name=p)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° sheet ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Reference Data
        df_ref.to_excel(writer, index=False, sheet_name="Reference Data")

    file_name = f"AirCheckTH_{province}_{start_date.strftime('%Y%m%d')}.xlsx"
    st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel", output.getvalue(), file_name=file_name)
