import streamlit as st
import pandas as pd
from datetime import datetime

import streamlit as st
import pandas as pd
from datetime import datetime

import streamlit as st
import pandas as pd
from datetime import datetime

import streamlit as st
import pandas as pd
from datetime import datetime

USERS = {
    "user01": {"password": "userpass", "role": "user"},
    "user02": {"password": "abc123", "role": "user"},
    "siwanon": {"password": "036623054", "role": "admin"}
}
import streamlit as st
import pandas as pd
from datetime import datetime
import os

import pandas as pd
import os

import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import random
import os

# ---------------------- User Management ----------------------
def load_users():
    if os.path.exists("users.csv"):
        return pd.read_csv("users.csv")
    else:
        return pd.DataFrame(columns=["username", "password", "role"])

def save_user(new_user):
    df = load_users()
    df = pd.concat([df, pd.DataFrame([new_user])], ignore_index=True)
    df.to_csv("users.csv", index=False)

def get_user_info(username):
    df = load_users()
    row = df[df["username"] == username]
    if not row.empty:
        return row.iloc[0]["password"], row.iloc[0]["role"]
    return None, None

# ---------------------- Login Session ----------------------
if "username" not in st.session_state:
    st.session_state.username = ""
    st.session_state.role = ""

# ---------------------- Register Section ----------------------
with st.expander("üìù ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"):
    new_user = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà")
    new_pass = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")
    if st.button("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"):
        if new_user.strip() == "" or new_pass.strip() == "":
            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
        else:
            df_users = load_users()
            if new_user in df_users["username"].values:
                st.error("‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà")
            else:
                save_user({"username": new_user, "password": new_pass, "role": "user"})
                st.success("‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")

# ---------------------- Login Section ----------------------
if st.session_state.username == "":
    st.title("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    user_input = st.text_input("Username")
    pass_input = st.text_input("Password", type="password")
    login_btn = st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")

    if login_btn:
        pw, role = get_user_info(user_input)
        if pw and pass_input == pw:
            st.session_state.username = user_input
            st.session_state.role = role

            # Log login
            log_entry = {
                "datetime": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "user": user_input,
                "role": role
            }
            try:
                if os.path.exists("user_log.csv"):
                    df_log = pd.read_csv("user_log.csv")
                    df_log = pd.concat([df_log, pd.DataFrame([log_entry])], ignore_index=True)
                else:
                    df_log = pd.DataFrame([log_entry])
                df_log.to_csv("user_log.csv", index=False)
            except:
                pass

            st.success("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        else:
            st.error("‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    st.stop()

# ---------------------- Logged In ----------------------
st.sidebar.success(f"üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {st.session_state.username} ({st.session_state.role})")

if st.session_state.role == "admin":
    with st.expander("üìã ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)"):
        try:
            df_log = pd.read_csv("user_log.csv")
            st.dataframe(df_log.tail(100))
        except:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ log ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏•‡∏î log ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
if st.session_state.role == "admin":
    st.write("‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô üõ°Ô∏è")


# (‡∏ï‡πà‡∏≠‡∏™‡πà‡∏ß‡∏ô UI ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà, ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á, ‡∏™‡∏£‡πâ‡∏≤‡∏á Excel ‡∏Ø‡∏•‡∏Ø)


# ---------------------- UI CONFIG ----------------------
st.set_page_config(page_title="AirCheck TH (Web)", layout="wide")
st.title("AirCheck TH - Web Version")

# ---------------------- INPUTS ----------------------
col1, col2 = st.columns(2)

with col1:
    start_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", datetime.today())
    num_days = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô (1-8)", 1, 8, 3)
    factory_direction = st.selectbox("‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô", ["NE", "NW", "SE", "SW"])

with col2:
    st.markdown("### ‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°")
    near_road = st.checkbox("‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏ô‡∏ô")
    near_factory = st.checkbox("‡πÉ‡∏Å‡∏•‡πâ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô")

# ---------------------- SITUATIONS ----------------------
sit_options = {
    "‡πÅ‡∏î‡∏î": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡πÅ‡∏î‡∏î‡∏≠‡πà‡∏≠‡∏ô", "‡πÅ‡∏î‡∏î‡πÅ‡∏£‡∏á"],
    "‡∏•‡∏°": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏ô‡∏¥‡πà‡∏á/‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏°", "‡πÄ‡∏ö‡∏≤", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡πÅ‡∏£‡∏á"],
    "‡∏Å‡∏•‡∏¥‡πà‡∏ô": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô"],
    "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏´‡∏ô‡∏≤‡∏ß‡∏à‡∏±‡∏î", "‡∏´‡∏ô‡∏≤‡∏ß", "‡πÄ‡∏¢‡πá‡∏ô", "‡∏õ‡∏Å‡∏ï‡∏¥", "‡∏£‡πâ‡∏≠‡∏ô", "‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î"],
    "‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™", "‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô", "‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡∏Å"],
    "‡∏ù‡∏ô": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏ï‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", "‡∏ï‡∏Å‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å"],
    "‡∏≠‡∏∑‡πà‡∏ô‡πÜ": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏£‡∏ñ‡πÄ‡∏¢‡∏≠‡∏∞", "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏≤‡∏Ç‡∏¢‡∏∞"]
}

st.markdown("### ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
day_situations = []

for i in range(num_days):
    with st.expander(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i+1}"):
        day_sit = {}
        wind = st.selectbox(f"‡∏ó‡∏¥‡∏®‡∏•‡∏° (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i+1})", ["NE", "NW", "SE", "SW"], key=f"wind_{i}")
        day_sit["‡∏ó‡∏¥‡∏®‡∏•‡∏°"] = wind
        for key, options in sit_options.items():
            day_sit[key] = st.selectbox(f"{key} (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i+1})", options, key=f"{key}_{i}")
        day_situations.append(day_sit)

# ---------------------- SIMULATE FUNCTION ----------------------
def simulate(var, day_sit, hour, wind_dir, factory_dir):
    base = random.uniform(2, 6)
    multiplier = 1.0
    add = 0.0

    if day_sit.get("‡∏ù‡∏ô") in ["‡∏ï‡∏Å‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å"]:
        multiplier *= 0.6
        add -= 1
    elif day_sit.get("‡∏ù‡∏ô") == "‡∏ï‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢":
        multiplier *= 0.85

    if day_sit.get("‡πÅ‡∏î‡∏î") == "‡πÅ‡∏î‡∏î‡πÅ‡∏£‡∏á":
        add += 4
        multiplier *= 1.1
    elif day_sit.get("‡πÅ‡∏î‡∏î") == "‡πÅ‡∏î‡∏î‡∏≠‡πà‡∏≠‡∏ô":
        add += 2

    if day_sit.get("‡∏•‡∏°") == "‡πÅ‡∏£‡∏á":
        if var == "WS": add += 3
        else: multiplier *= 0.7
    elif day_sit.get("‡∏•‡∏°") == "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á":
        if var == "WS": add += 1.5
    elif day_sit.get("‡∏•‡∏°") == "‡∏ô‡∏¥‡πà‡∏á/‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏°":
        multiplier *= 1.3
        add -= 0.5

    if day_sit.get("‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥") == "‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î":
        if var == "Temp": add += 4
    elif day_sit.get("‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥") == "‡∏´‡∏ô‡∏≤‡∏ß‡∏à‡∏±‡∏î":
        if var == "Temp": add -= 4

    if day_sit.get("‡∏Å‡∏•‡∏¥‡πà‡∏ô") == "‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô" and var in ["NO2", "SO2", "CO"]:
        multiplier *= 1.2

    if day_sit.get("‡∏≠‡∏∑‡πà‡∏ô‡πÜ") == "‡∏£‡∏ñ‡πÄ‡∏¢‡∏≠‡∏∞" and var in ["NO", "NO2", "CO"]:
        multiplier *= 1.4

    if day_sit.get("‡∏≠‡∏∑‡πà‡∏ô‡πÜ") == "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏≤‡∏Ç‡∏¢‡∏∞" and var in ["CO", "O3", "SO2"]:
        multiplier *= 1.3

    if near_road and var in ["NO", "NO2", "CO"]:
        multiplier *= 1.25

    if near_factory and wind_dir == factory_direction and var in ["NO2", "SO2"]:
        multiplier *= 1.5

    if var == "NO": return round(base * multiplier + add + random.uniform(0.5, 2.5), 2)
    if var == "NO2": return round(base * multiplier + add + random.uniform(0.8, 2.8), 2)
    if var == "NOx": return None
    if var == "Temp": return round(27 + add + random.uniform(-2, 2), 2)
    if var == "RH": return round(65 + add + random.uniform(-12, 15), 2)
    if var == "WS": return round(min(4, 2.5 + add + random.uniform(-1.5, 1.5)), 2)
    if var == "Pressure": return round(1010 + random.uniform(-6, 6), 2)
    if var == "SO2": return round(base * multiplier + add + random.uniform(0.6, 2.2), 2)
    if var == "CO": return round(base * multiplier + add + random.uniform(0.1, 1.0), 2)
    if var == "O3": return round(30 + add + random.uniform(5, 25), 2)
    return round(base * multiplier + add, 2)

# ---------------------- GENERATE ----------------------
if st.button("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
    records = []
    for i in range(num_days):
        date = start_date + timedelta(days=i)
        sit = day_situations[i]
        wind_dir = sit.get("‡∏ó‡∏¥‡∏®‡∏•‡∏°", "NE")

        for hour in range(24):
            no = simulate("NO", sit, hour, wind_dir, factory_direction)
            no2 = simulate("NO2", sit, hour, wind_dir, factory_direction)
            nox = no + no2
            temp = simulate("Temp", sit, hour, wind_dir, factory_direction)
            rh = simulate("RH", sit, hour, wind_dir, factory_direction)
            ws = simulate("WS", sit, hour, wind_dir, factory_direction)
            pres = simulate("Pressure", sit, hour, wind_dir, factory_direction)
            so2 = simulate("SO2", sit, hour, wind_dir, factory_direction)
            co = simulate("CO", sit, hour, wind_dir, factory_direction)
            o3 = simulate("O3", sit, hour, wind_dir, factory_direction)

            records.append({
                "Date": date.strftime("%Y-%m-%d"), "Hour": f"{hour:02d}:00",
                "NO": no, "NO2": no2, "NOx": nox,
                "Temp": temp, "RH": rh, "WS": ws, "WD": wind_dir, "Pressure": pres,
                "SO2": so2, "CO": co, "O3": o3
            })

    df = pd.DataFrame(records)
    st.success("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
    st.dataframe(df)

    df_nox = df[["Date", "Hour", "NO", "NO2", "NOx"]]
    df_env = df[["Date", "Hour", "WS", "WD", "Temp", "RH", "Pressure"]]
    df_so2 = df[["Date", "Hour", "SO2"]]
    df_co = df[["Date", "Hour", "CO"]]
    df_o3 = df[["Date", "Hour", "O3"]]

    df_env["WD_degree"] = [f'=IF(D{i+2}="NE",RANDBETWEEN(0,90),IF(D{i+2}="SE",RANDBETWEEN(91,180),IF(D{i+2}="SW",RANDBETWEEN(181,270),IF(D{i+2}="NW",RANDBETWEEN(271,359),""))))' for i in range(len(df_env))]

    from io import BytesIO
    output = BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        df_nox.to_excel(writer, index=False, sheet_name="NOx Group")
        df_env.to_excel(writer, index=False, sheet_name="ENV")
        df_so2.to_excel(writer, index=False, sheet_name="SO2")
        df_co.to_excel(writer, index=False, sheet_name="CO")
        df_o3.to_excel(writer, index=False, sheet_name="O3")

    st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô Excel", data=output.getvalue(), file_name="AirCheckTH_Web.xlsx")

if st.session_state.role == "admin":
    with st.expander("üìã ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)"):
        try:
            df_log = pd.read_csv("user_log.csv")
            st.dataframe(df_log.tail(100))  # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 100 ‡πÅ‡∏ñ‡∏ß
        except:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ log ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏•‡∏î log ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")

