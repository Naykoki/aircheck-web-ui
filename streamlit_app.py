# AirCheckTH_Web UI - Final Cloud Version (OpenWeather + Air4Thai + Login + Logo)
import streamlit as st
import pandas as pd
import requests
import random
from datetime import datetime, timedelta
from io import BytesIO
import os

# ------------------ PAGE CONFIG ------------------
st.set_page_config(page_title="AirCheck TH", layout="wide", page_icon="logo.ico")

# ------------------ LOGO ------------------
st.image("logo.ico", width=100)

# ------------------ LOGIN SYSTEM ------------------
if "username" not in st.session_state:
    st.session_state.username = ""
    st.session_state.role = ""

if st.session_state.username == "":
    st.title("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    username = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    if st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
        st.session_state.username = username
        st.session_state.role = "admin" if username.lower() == "siwanon" else "user"
        st.experimental_rerun()
    st.stop()

# ------------------ USER STATUS ------------------
st.sidebar.success(f"üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {st.session_state.username} ({st.session_state.role})")

# ------------------ LOG ACCESS ------------------
if st.session_state.role == "admin":
    log_file = "user_log.csv"
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log = pd.DataFrame([{"time": now, "user": st.session_state.username}])
    if os.path.exists(log_file):
        old = pd.read_csv(log_file)
        log = pd.concat([old, log], ignore_index=True)
    log.to_csv(log_file, index=False)

    with st.expander("üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"):
        st.dataframe(log.tail(50))

# ------------------ API CONFIG ------------------
OW_API_KEY = "83381fd2dfb9760f22710f0a419897c0"
province_list = ["‡∏£‡∏∞‡∏¢‡∏≠‡∏á", "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£", "‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤", "‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ", "‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ", "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ", "‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ"]
selected_province = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", province_list)

# ------------------ API FUNCTIONS ------------------
@st.cache_data(ttl=3600)
def get_openweather(city="Bangkok"):
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={OW_API_KEY}&units=metric"
    r = requests.get(url)
    if r.status_code == 200:
        data = r.json()
        return {
            "Temp": data["main"]["temp"],
            "RH": data["main"]["humidity"],
            "WS": data["wind"]["speed"]
        }
    return {}

@st.cache_data(ttl=3600)
def get_air4thai(province="‡∏£‡∏∞‡∏¢‡∏≠‡∏á"):
    url = f"http://air4thai.pcd.go.th/webV2/history/api/data.php?province={province}&station=all"
    r = requests.get(url)
    if r.status_code == 200:
        data = r.json()
        return data
    return {}

ref_open = get_openweather(selected_province)
ref_open = ref_open if ref_open else {"Temp": 27, "RH": 65, "WS": 2.5}

# ------------------ UI INPUT ------------------
st.title("AirCheck TH - Web Version")
col1, col2 = st.columns(2)
with col1:
    start_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", datetime.today())
    num_days = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô (1-8)", 1, 8, 3)
    factory_direction = st.selectbox("‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô", ["NE", "NW", "SE", "SW"])
with col2:
    near_road = st.checkbox("‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏ô‡∏ô")
    near_factory = st.checkbox("‡πÉ‡∏Å‡∏•‡πâ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô")

params_to_calculate = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå", [
    "NO", "NO2", "NOx", "SO2", "CO", "O3", "WS", "WD", "Temp", "RH", "Pressure"
], default=["NO", "NO2", "NOx", "WS", "WD", "Temp", "RH", "Pressure"])

sit_options = {
    "‡πÅ‡∏î‡∏î": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡πÅ‡∏î‡∏î‡∏≠‡πà‡∏≠‡∏ô", "‡πÅ‡∏î‡∏î‡πÅ‡∏£‡∏á"],
    "‡∏•‡∏°": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏ô‡∏¥‡πà‡∏á/‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏°", "‡πÄ‡∏ö‡∏≤", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡πÅ‡∏£‡∏á"],
    "‡∏Å‡∏•‡∏¥‡πà‡∏ô": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô"],
    "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏´‡∏ô‡∏≤‡∏ß", "‡πÄ‡∏¢‡πá‡∏ô", "‡∏õ‡∏Å‡∏ï‡∏¥", "‡∏£‡πâ‡∏≠‡∏ô", "‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î"],
    "‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™", "‡∏°‡∏µ‡πÄ‡∏°‡∏Ü", "‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡∏Å"],
    "‡∏ù‡∏ô": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏ï‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", "‡∏ï‡∏Å‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å"],
    "‡∏≠‡∏∑‡πà‡∏ô‡πÜ": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏£‡∏ñ‡πÄ‡∏¢‡∏≠‡∏∞", "‡πÄ‡∏ú‡∏≤‡∏Ç‡∏¢‡∏∞"]
}

st.markdown("### ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
day_situations = []
for i in range(num_days):
    with st.expander(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i+1}"):
        sit = {}
        wind = st.selectbox(f"‡∏ó‡∏¥‡∏®‡∏•‡∏° (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i+1})", ["NE", "NW", "SE", "SW"], key=f"wind_{i}")
        sit["‡∏ó‡∏¥‡∏®‡∏•‡∏°"] = wind
        for key, options in sit_options.items():
            sit[key] = st.selectbox(f"{key} (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i+1})", options, key=f"{key}_{i}")
        day_situations.append(sit)

# ------------------ SIMULATION ------------------
def simulate(var, sit, wind, factory):
    base = random.uniform(2, 6)
    multi = 1.0
    add = 0.0

    if sit["‡∏ù‡∏ô"] in ["‡∏ï‡∏Å‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å"]: multi *= 0.6; add -= 1
    if sit["‡πÅ‡∏î‡∏î"] == "‡πÅ‡∏î‡∏î‡πÅ‡∏£‡∏á": add += 3; multi *= 1.1
    if sit["‡∏•‡∏°"] == "‡πÅ‡∏£‡∏á": add += 2 if var == "WS" else 0; multi *= 0.8
    if sit["‡∏Å‡∏•‡∏¥‡πà‡∏ô"] == "‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô" and var in ["NO2", "CO", "SO2"]: multi *= 1.2
    if sit["‡∏≠‡∏∑‡πà‡∏ô‡πÜ"] == "‡∏£‡∏ñ‡πÄ‡∏¢‡∏≠‡∏∞" and var in ["NO", "NO2", "CO"]: multi *= 1.4
    if near_road and var in ["NO", "NO2", "CO"]: multi *= 1.2
    if near_factory and wind == factory and var in ["SO2", "NO2"]: multi *= 1.4

    if var == "NO": return round(base * multi + add + random.uniform(0.5, 2), 2)
    if var == "NO2": return round(min(20, base * multi + add + random.uniform(0.8, 2.5)), 2)
    if var == "NOx": return None
    if var == "Temp": return round(ref_open["Temp"] + add + random.uniform(-2, 2), 2)
    if var == "RH": return round(ref_open["RH"] + add + random.uniform(-10, 10), 2)
    if var == "WS": return round(min(4, ref_open["WS"] + add + random.uniform(-1, 1)), 2)
    if var == "Pressure": return round(1010 + random.uniform(-5, 5), 2)
    if var == "SO2": return round(base * multi + random.uniform(0.5, 1.5), 2)
    if var == "CO": return round(base * multi + random.uniform(0.1, 0.5), 2)
    if var == "O3": return round(30 + add + random.uniform(5, 15), 2)
    return base

# ------------------ GENERATE ------------------
if st.button("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel"):
    rows = []
    for i in range(num_days):
        date = start_date + timedelta(days=i)
        sit = day_situations[i]
        wind = sit["‡∏ó‡∏¥‡∏®‡∏•‡∏°"]
        for h in range(24):
            row = {"Date": date.strftime("%Y-%m-%d"), "Hour": f"{h:02d}:00", "WD": wind}
            no = simulate("NO", sit, wind, factory_direction) if "NO" in params_to_calculate else None
            no2 = simulate("NO2", sit, wind, factory_direction) if "NO2" in params_to_calculate else None
            nox = no + no2 if (no and no2 and "NOx" in params_to_calculate) else None
            row["NO"], row["NO2"], row["NOx"] = no, no2, nox
            for p in ["Temp", "RH", "WS", "Pressure", "SO2", "CO", "O3"]:
                if p in params_to_calculate:
                    row[p] = simulate(p, sit, wind, factory_direction)
            rows.append(row)

    df = pd.DataFrame(rows)
    st.success("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
    st.dataframe(df.head(50))

    output = BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        df.to_excel(writer, index=False, sheet_name="AirCheck Data")

    fname = f"AirCheck_{start_date.strftime('%Y%m%d')}_{(start_date + timedelta(days=num_days - 1)).strftime('%Y%m%d')}.xlsx"
    st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel", data=output.getvalue(), file_name=fname)
