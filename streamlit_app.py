import streamlit as st
import pandas as pd
import random
import requests
from datetime import datetime, timedelta
from io import BytesIO

# ---------------- CONFIG ----------------
st.set_page_config(page_title="AirCheck TH", layout="wide")
st.image("logo.png", width=120)
st.title("üåç AirCheck TH - ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏≥‡∏•‡∏≠‡∏á")

# ---------------- Login ----------------
if "user" not in st.session_state:
    st.session_state.user = None
    st.session_state.role = None

with st.sidebar:
    st.header("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    username = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    if st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
        if username.strip() == "":
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            st.stop()
        st.session_state.user = username
        st.session_state.role = "admin" if username.lower() == "siwanon" else "user"
        st.rerun()  # ‚úÖ ‡πÉ‡∏ä‡πâ st.rerun() ‡πÅ‡∏ó‡∏ô experimental

if not st.session_state.user:
    st.stop()

# ---------------- Header ----------------
st.sidebar.success(f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö: {st.session_state.user} ({st.session_state.role})")

# ---------------- Province + API ----------------
province = st.selectbox("üìç ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á", [
    "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£", "‡∏£‡∏∞‡∏¢‡∏≠‡∏á", "‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤", "‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ", "‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ", "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ", "‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ"
])

def get_openweather(province):
    try:
        api_key = st.secrets["OPENWEATHER_API"]
        url = f"https://api.openweathermap.org/data/2.5/weather?q={province},TH&appid={api_key}&units=metric"
        res = requests.get(url)
        if res.status_code != 200:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ OpenWeather ‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô")
            return {"WS": 2.5, "WD": 90, "Temp": 27.0, "RH": 65.0}
        data = res.json()
        return {
            "WS": data["wind"]["speed"],
            "WD": data["wind"].get("deg", 0),
            "Temp": data["main"]["temp"],
            "RH": data["main"]["humidity"]
        }
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Error: {e}")
        return {"WS": 2.5, "WD": 90, "Temp": 27.0, "RH": 65.0}

ref_data = get_openweather(province)
st.info(f"üì° ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å OpenWeather: Temp={ref_data['Temp']}¬∞C, RH={ref_data['RH']}%, WS={ref_data['WS']} m/s")

# ---------------- INPUTS ----------------
col1, col2 = st.columns(2)
with col1:
    start_date = st.date_input("üìÜ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", datetime.today())
    num_days = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô (1‚Äì8)", 1, 8, 3)
    factory_direction = st.selectbox("‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô", ["NE", "NW", "SE", "SW"])
with col2:
    st.markdown("### üèûÔ∏è ‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°")
    near_road = st.checkbox("‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏ô‡∏ô")
    near_factory = st.checkbox("‡πÉ‡∏Å‡∏•‡πâ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô")

params = st.multiselect("üìå ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì", [
    "NO", "NO2", "NOx", "SO2", "CO", "O3", "WS", "WD", "Temp", "RH", "Pressure"
], default=["NO", "NO2", "NOx", "WS", "WD", "Temp", "RH", "Pressure"])

sit_options = {
    "‡πÅ‡∏î‡∏î": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡πÅ‡∏î‡∏î‡∏≠‡πà‡∏≠‡∏ô", "‡πÅ‡∏î‡∏î‡πÅ‡∏£‡∏á"],
    "‡∏•‡∏°": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏ô‡∏¥‡πà‡∏á/‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏°", "‡πÄ‡∏ö‡∏≤", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡πÅ‡∏£‡∏á"],
    "‡∏Å‡∏•‡∏¥‡πà‡∏ô": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô"],
    "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏´‡∏ô‡∏≤‡∏ß‡∏à‡∏±‡∏î", "‡∏´‡∏ô‡∏≤‡∏ß", "‡πÄ‡∏¢‡πá‡∏ô", "‡∏õ‡∏Å‡∏ï‡∏¥", "‡∏£‡πâ‡∏≠‡∏ô", "‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î"],
    "‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™", "‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô", "‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡∏Å"],
    "‡∏ù‡∏ô": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏ï‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", "‡∏ï‡∏Å‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å"],
    "‡∏≠‡∏∑‡πà‡∏ô‡πÜ": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏£‡∏ñ‡πÄ‡∏¢‡∏≠‡∏∞", "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏≤‡∏Ç‡∏¢‡∏∞"]
}

st.markdown("### üå§Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
day_situations = []
for i in range(num_days):
    with st.expander(f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i+1}"):
        sit = {}
        wind_dir = st.selectbox(f"‡∏ó‡∏¥‡∏®‡∏•‡∏° (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i+1})", ["NE", "NW", "SE", "SW"], key=f"wd_{i}")
        sit["‡∏ó‡∏¥‡∏®‡∏•‡∏°"] = wind_dir
        for key, opts in sit_options.items():
            sit[key] = st.selectbox(f"{key} (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i+1})", opts, key=f"{key}_{i}")
        day_situations.append(sit)

# ---------------- SIMULATE ----------------
def simulate(var, sit, hour, wind_dir):
    ref = ref_data.get(var, 0)
    base = ref if ref else random.uniform(2, 6)
    multiplier = 1.0
    add = 0.0

    if sit["‡∏ù‡∏ô"] in ["‡∏ï‡∏Å‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å"]: multiplier *= 0.6; add -= 1
    elif sit["‡∏ù‡∏ô"] == "‡∏ï‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢": multiplier *= 0.85
    if sit["‡πÅ‡∏î‡∏î"] == "‡πÅ‡∏î‡∏î‡πÅ‡∏£‡∏á": add += 4; multiplier *= 1.1
    elif sit["‡πÅ‡∏î‡∏î"] == "‡πÅ‡∏î‡∏î‡∏≠‡πà‡∏≠‡∏ô": add += 2
    if sit["‡∏•‡∏°"] == "‡πÅ‡∏£‡∏á": add += 3 if var == "WS" else 0; multiplier *= 0.7
    elif sit["‡∏•‡∏°"] == "‡∏ô‡∏¥‡πà‡∏á/‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏°": multiplier *= 1.3; add -= 0.5
    if sit["‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥"] == "‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î" and var == "Temp": add += 4
    if sit["‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥"] == "‡∏´‡∏ô‡∏≤‡∏ß‡∏à‡∏±‡∏î" and var == "Temp": add -= 4
    if sit["‡∏Å‡∏•‡∏¥‡πà‡∏ô"] == "‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô" and var in ["NO2", "SO2", "CO"]: multiplier *= 1.2
    if sit["‡∏≠‡∏∑‡πà‡∏ô‡πÜ"] == "‡∏£‡∏ñ‡πÄ‡∏¢‡∏≠‡∏∞" and var in ["NO", "NO2", "CO"]: multiplier *= 1.4
    if sit["‡∏≠‡∏∑‡πà‡∏ô‡πÜ"] == "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏≤‡∏Ç‡∏¢‡∏∞" and var in ["CO", "O3", "SO2"]: multiplier *= 1.3
    if near_road and var in ["NO", "NO2", "CO"]: multiplier *= 1.25
    if near_factory and wind_dir == factory_direction and var in ["NO2", "SO2"]: multiplier *= 1.5

    if var == "NO": return round(base * multiplier + add + random.uniform(0.5, 2.5), 2)
    if var == "NO2": return round(min(20, base * multiplier + add + random.uniform(0.8, 2.8)), 2)
    if var == "NOx": return None
    if var == "WS": return round(min(4, base + add + random.uniform(-1.0, 1.5)), 2)
    if var == "WD": return wind_dir
    if var == "Temp": return round(base + add + random.uniform(-2, 2), 2)
    if var == "RH": return round(min(100, base + add + random.uniform(-8, 10)), 2)
    if var == "Pressure": return round(1010 + random.uniform(-5, 5), 2)
    if var == "SO2": return round(base * multiplier + add + random.uniform(0.5, 2.5), 2)
    if var == "CO": return round(base * multiplier + add + random.uniform(0.1, 1.2), 2)
    if var == "O3": return round(30 + add + random.uniform(5, 25), 2)
    return round(base * multiplier + add, 2)

# ---------------- GENERATE ----------------
if st.button("üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel"):
    records = []
    for i in range(num_days):
        date = start_date + timedelta(days=i)
        sit = day_situations[i]
        wind_dir = sit["‡∏ó‡∏¥‡∏®‡∏•‡∏°"]
        for hour in range(24):
            time_str = f"{hour:02d}:00:00"
            row = {"Date": date.strftime("%Y-%m-%d"), "Time": time_str}
            no = simulate("NO", sit, hour, wind_dir) if "NO" in params else None
            no2 = simulate("NO2", sit, hour, wind_dir) if "NO2" in params else None
            row["NO"] = no
            row["NO2"] = no2
            if "NOx" in params and no is not None and no2 is not None:
                row["NOx"] = round(no + no2, 2)
            else:
                row["NOx"] = None
            for var in ["WS", "WD", "Temp", "RH", "Pressure", "SO2", "CO", "O3"]:
                if var in params:
                    row[var] = simulate(var, sit, hour, wind_dir)
            records.append(row)

    df = pd.DataFrame(records)
    st.success("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
    st.dataframe(df.head(48))

    # ---------------- EXCEL EXPORT ----------------
    df_env = df[[c for c in ["Date", "Time", "WS", "WD", "Temp", "RH", "Pressure"] if c in df.columns]]
    df_nox = df[["Date", "Time", "NO", "NO2", "NOx"]] if "NO" in df.columns else pd.DataFrame()
    output = BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        if not df_nox.empty:
            df_nox.to_excel(writer, index=False, sheet_name="NOx Group")
        if not df_env.empty:
            df_env.to_excel(writer, index=False, sheet_name="ENV")
        for p in ["SO2", "CO", "O3"]:
            if p in df.columns:
                df[["Date", "Time", p]].to_excel(writer, index=False, sheet_name=p)

    output.seek(0)
    file_name = f"AirCheckTH_{province}_{start_date.strftime('%Y%m%d')}.xlsx"
    st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel", output.getvalue(), file_name=file_name)
