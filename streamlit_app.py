import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import random
import os
import requests
from io import BytesIO

# ---------------------- Input User Name ----------------------
st.set_page_config(page_title="AirCheck TH (Web)", layout="wide")

if "username" not in st.session_state:
    st.session_state.username = ""
    st.session_state.role = ""

if st.session_state.username == "":
    st.title("üîê ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    input_user = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    if st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
        if input_user.strip() == "":
            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠")
            st.stop()
        else:
            st.session_state.username = input_user.strip()
            if input_user.strip().lower() == "siwanon":
                st.session_state.role = "admin"
            else:
                st.session_state.role = "user"

            log_entry = {
                "datetime": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "user": st.session_state.username,
                "role": st.session_state.role
            }
            try:
                if os.path.exists("user_log.csv"):
                    df_log = pd.read_csv("user_log.csv")
                    df_log = pd.concat([df_log, pd.DataFrame([log_entry])], ignore_index=True)
                else:
                    df_log = pd.DataFrame([log_entry])
                df_log.to_csv("user_log.csv", index=False)
            except:
                pass

            st.success("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            st.experimental_rerun()
    st.stop()

# ---------------------- Header ----------------------
st.sidebar.success(f"üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {st.session_state.username} ({st.session_state.role})")

if st.session_state.role == "admin":
    st.markdown("## üõ°Ô∏è Log ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    try:
        df_log = pd.read_csv("user_log.csv")
        st.dataframe(df_log.tail(100), use_container_width=True)
    except:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ log ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏•‡∏î log ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")

st.title("AirCheck TH - Web Version")

st.markdown("""
‚öôÔ∏è ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏•‡∏û‡∏¥‡∏©‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á
""")

# ---------------------- ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå ----------------------
st.subheader("üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
province = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", ["‡∏£‡∏∞‡∏¢‡∏≠‡∏á", "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£", "‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤", "‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ", "‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ", "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ", "‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ", "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô", "‡∏™‡∏á‡∏Ç‡∏•‡∏≤"])
params_to_calculate = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì", ["NO", "NO2", "NOx", "SO2", "CO", "O3", "WS", "WD", "Temp", "RH", "Pressure"], default=["NO", "NO2", "NOx"])

# ---------------------- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á ----------------------
st.subheader("üì• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î")
ref_data = {}
ref_source = ""
openweather_ref = {}

# Air4Thai
station_mapping = {
    "‡∏£‡∏∞‡∏¢‡∏≠‡∏á": ["71t", "73t"],
    "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£": ["11t", "13t", "17t", "19t"],
    "‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤": ["14t"],
    "‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ": ["16t"],
    "‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ": ["70t"],
    "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ": ["20t", "21t"],
    "‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ": ["74t"],
    "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà": ["50t"],
    "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô": ["43t"],
    "‡∏™‡∏á‡∏Ç‡∏•‡∏≤": ["90t"]
}

station_list = station_mapping.get(province, [])
data_loaded = False

for station in station_list:
    try:
        url = f"https://air4thai.pcd.go.th/webV2/history/api/data.php?station={station}&param=O3&year=2024&month=07&day=16"
        res = requests.get(url)
        if res.status_code == 200:
            ref_data = res.json()
            ref_source = f"Air4Thai ({station})"
            st.success(f"‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Air4Thai ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ {station}")
            data_loaded = True
            break
    except:
        continue

# OpenWeather
openweather_api_key = "83381fd2dfb9760f22710f0a419897c0"
try:
    ow_url = f"http://api.openweathermap.org/data/2.5/weather?q={province},TH&appid={openweather_api_key}&units=metric"
    res = requests.get(ow_url)
    if res.status_code == 200:
        ow_json = res.json()
        openweather_ref = {
            "Temp": ow_json["main"]["temp"],
            "RH": ow_json["main"]["humidity"],
            "WS": ow_json["wind"]["speed"]
        }
        st.success("‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πà‡∏ß‡∏°‡∏à‡∏≤‡∏Å OpenWeather")
        if not data_loaded:
            ref_source = "OpenWeather"
            data_loaded = True
except:
    st.warning("‚ö†Ô∏è ‡πÇ‡∏´‡∏•‡∏î OpenWeather ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

if not data_loaded:
    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏µ‡πâ ‚Äî ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô")

# ---------------------- ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°: UI ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå, ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì, ‡∏™‡∏£‡πâ‡∏≤‡∏á Excel ----------------------
st.subheader("üìÜ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå")
col1, col2 = st.columns(2)
with col1:
    start_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", datetime.today())
    num_days = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô (1‚Äì7)", 1, 7, 2)
    factory_direction = st.selectbox("‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô", ["NE", "NW", "SE", "SW"])

with col2:
    st.markdown("### ‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°")
    near_road = st.checkbox("‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏ô‡∏ô")
    near_factory = st.checkbox("‡πÉ‡∏Å‡∏•‡πâ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô")

sit_options = {
    "‡πÅ‡∏î‡∏î": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡πÅ‡∏î‡∏î‡∏≠‡πà‡∏≠‡∏ô", "‡πÅ‡∏î‡∏î‡πÅ‡∏£‡∏á"],
    "‡∏•‡∏°": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏ô‡∏¥‡πà‡∏á/‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏°", "‡πÄ‡∏ö‡∏≤", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡πÅ‡∏£‡∏á"],
    "‡∏Å‡∏•‡∏¥‡πà‡∏ô": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô"],
    "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏´‡∏ô‡∏≤‡∏ß‡∏à‡∏±‡∏î", "‡∏´‡∏ô‡∏≤‡∏ß", "‡πÄ‡∏¢‡πá‡∏ô", "‡∏õ‡∏Å‡∏ï‡∏¥", "‡∏£‡πâ‡∏≠‡∏ô", "‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î"],
    "‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™", "‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô", "‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡∏Å"],
    "‡∏ù‡∏ô": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏ï‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", "‡∏ï‡∏Å‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å"],
    "‡∏≠‡∏∑‡πà‡∏ô‡πÜ": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏£‡∏ñ‡πÄ‡∏¢‡∏≠‡∏∞", "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏≤‡∏Ç‡∏¢‡∏∞"]
}

st.markdown("### ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
day_situations = []

for i in range(num_days):
    with st.expander(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i+1}"):
        day_sit = {}
        wind = st.selectbox(f"‡∏ó‡∏¥‡∏®‡∏•‡∏° (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i+1})", ["NE", "NW", "SE", "SW"], key=f"wind_{i}")
        day_sit["‡∏ó‡∏¥‡∏®‡∏•‡∏°"] = wind
        for key, options in sit_options.items():
            day_sit[key] = st.selectbox(f"{key} (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i+1})", options, key=f"{key}_{i}")
        day_situations.append(day_sit)

# ‚úÖ ‡∏ï‡πà‡∏≠‡∏™‡πà‡∏ß‡∏ô simulate, generate, download Excel ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ñ‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ
...

... (‡∏ï‡∏±‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô)

# ---------------------- SIMULATION FUNCTION ----------------------
def simulate(var, day_sit, hour, wind_dir, factory_dir):
    base = random.uniform(2, 6)
    multiplier = 1.0
    add = 0.0

    if day_sit.get("‡∏ù‡∏ô") in ["‡∏ï‡∏Å‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å"]:
        multiplier *= 0.6
        add -= 1
    elif day_sit.get("‡∏ù‡∏ô") == "‡∏ï‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢":
        multiplier *= 0.85

    if day_sit.get("‡πÅ‡∏î‡∏î") == "‡πÅ‡∏î‡∏î‡πÅ‡∏£‡∏á":
        add += 4
        multiplier *= 1.1
    elif day_sit.get("‡πÅ‡∏î‡∏î") == "‡πÅ‡∏î‡∏î‡∏≠‡πà‡∏≠‡∏ô":
        add += 2

    if day_sit.get("‡∏•‡∏°") == "‡πÅ‡∏£‡∏á":
        if var == "WS": add += 3
        else: multiplier *= 0.7
    elif day_sit.get("‡∏•‡∏°") == "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á":
        if var == "WS": add += 1.5
    elif day_sit.get("‡∏•‡∏°") == "‡∏ô‡∏¥‡πà‡∏á/‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏°":
        multiplier *= 1.3
        add -= 0.5

    if day_sit.get("‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥") == "‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î":
        if var == "Temp": add += 4
    elif day_sit.get("‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥") == "‡∏´‡∏ô‡∏≤‡∏ß‡∏à‡∏±‡∏î":
        if var == "Temp": add -= 4

    if day_sit.get("‡∏Å‡∏•‡∏¥‡πà‡∏ô") == "‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô" and var in ["NO2", "SO2", "CO"]:
        multiplier *= 1.2

    if day_sit.get("‡∏≠‡∏∑‡πà‡∏ô‡πÜ") == "‡∏£‡∏ñ‡πÄ‡∏¢‡∏≠‡∏∞" and var in ["NO", "NO2", "CO"]:
        multiplier *= 1.4

    if day_sit.get("‡∏≠‡∏∑‡πà‡∏ô‡πÜ") == "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏≤‡∏Ç‡∏¢‡∏∞" and var in ["CO", "O3", "SO2"]:
        multiplier *= 1.3

    if near_road and var in ["NO", "NO2", "CO"]:
        multiplier *= 1.25

    if near_factory and wind_dir == factory_dir and var in ["NO2", "SO2"]:
        multiplier *= 1.5

    if var == "NO": return round(base * multiplier + add + random.uniform(0.5, 2.5), 2)
    if var == "NO2": return round(min(20, base * multiplier + add + random.uniform(0.8, 2.8)), 2)
    if var == "NOx": return None
    if var == "Temp": return round(openweather_ref.get("Temp", 27) + add + random.uniform(-2, 2), 2)
    if var == "RH": return round(openweather_ref.get("RH", 65) + add + random.uniform(-12, 15), 2)
    if var == "WS": return round(min(4, openweather_ref.get("WS", 2.5) + add + random.uniform(-1.5, 1.5)), 2)
    if var == "Pressure": return round(1010 + random.uniform(-6, 6), 2)
    if var == "SO2": return round(base * multiplier + add + random.uniform(0.6, 2.2), 2)
    if var == "CO": return round(base * multiplier + add + random.uniform(0.1, 1.0), 2)
    if var == "O3": return round(30 + add + random.uniform(5, 25), 2)
    return round(base * multiplier + add, 2)

# ---------------------- GENERATE + EXPORT ----------------------
if st.button("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel"):
    records = []
    for i in range(num_days):
        date = start_date + timedelta(days=i)
        sit = day_situations[i]
        wind_dir = sit.get("‡∏ó‡∏¥‡∏®‡∏•‡∏°", "NE")

        for hour in range(24):
            row = {"Date": date.strftime("%Y-%m-%d"), "Hour": f"{hour:02d}:00"}
            no = simulate("NO", sit, hour, wind_dir, factory_direction) if "NO" in params_to_calculate else None
            no2 = simulate("NO2", sit, hour, wind_dir, factory_direction) if "NO2" in params_to_calculate else None
            nox = no + no2 if (no is not None and no2 is not None and "NOx" in params_to_calculate) else None

            for var in ["Temp", "RH", "WS", "Pressure", "SO2", "CO", "O3"]:
                if var in params_to_calculate:
                    row[var] = simulate(var, sit, hour, wind_dir, factory_direction)

            row["NO"] = no if "NO" in params_to_calculate else None
            row["NO2"] = no2 if "NO2" in params_to_calculate else None
            row["NOx"] = nox if "NOx" in params_to_calculate else None
            row["WD"] = wind_dir
            records.append(row)

    df = pd.DataFrame(records)
    st.success("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
    st.dataframe(df.head(50))

    df_env = df[[col for col in ["Date", "Hour", "WS", "WD", "Temp", "RH", "Pressure"] if col in df.columns]]
    df_env["WD_degree"] = [f'=IF(D{i+2}="NE",RANDBETWEEN(0,90),IF(D{i+2}="SE",RANDBETWEEN(91,180),IF(D{i+2}="SW",RANDBETWEEN(181,270),RANDBETWEEN(271,359))))' for i in range(len(df_env))]

    output = BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        if "NO" in df.columns or "NO2" in df.columns or "NOx" in df.columns:
            df[["Date", "Hour", "NO", "NO2", "NOx"]].to_excel(writer, index=False, sheet_name="NOx Group")
        if not df_env.empty:
            df_env.to_excel(writer, index=False, sheet_name="ENV")
        for param in ["SO2", "CO", "O3"]:
            if param in df.columns:
                df[["Date", "Hour", param]].to_excel(writer, index=False, sheet_name=param)

    file_name = f"AirCheckTH_{'_'.join(params_to_calculate)}_{start_date.strftime('%Y%m%d')}_{(start_date + timedelta(days=num_days-1)).strftime('%Y%m%d')}.xlsx"
    st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel", data=output.getvalue(), file_name=file_name)
