import streamlit as st
import pandas as pd
import random
import requests
from datetime import datetime, timedelta
from io import BytesIO

# ---------------------- CONFIG ----------------------
st.set_page_config(page_title="AirCheck TH (Web)", layout="wide")
st.image("logo.png", width=100)
st.title("AirCheck TH - Web Version")

# ---------------------- LOGIN ----------------------
if "username" not in st.session_state:
    st.session_state["username"] = ""

with st.sidebar:
    st.header("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    username = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    if st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
        st.session_state["username"] = username

if st.session_state["username"] == "":
    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    st.stop()

role = "admin" if st.session_state["username"].strip().lower() == "siwanon" else "user"
st.sidebar.success(f"üë§ {st.session_state['username']} ({role})")

# ---------------------- Province Selector ----------------------
province = st.selectbox("üìç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", [
    "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£", "‡∏£‡∏∞‡∏¢‡∏≠‡∏á", "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ", "‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ", "‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤", "‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ", "‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ"
])

# ---------------------- ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ----------------------
params_to_calculate = st.multiselect("üìä ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì", [
    "NO", "NO2", "NOx", "SO2", "CO", "O3", "WS", "WD", "Temp", "RH", "Pressure"
], default=["NO", "NO2", "NOx", "WS", "WD", "Temp", "RH", "Pressure"])

# ---------------------- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå ----------------------
col1, col2 = st.columns(2)
with col1:
    start_date = st.date_input("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", datetime.today())
    num_days = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô (1-8)", 1, 8, 3)
    factory_direction = st.selectbox("üè≠ ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô", ["NE", "NW", "SE", "SW"])
with col2:
    near_road = st.checkbox("‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏ô‡∏ô")
    near_factory = st.checkbox("‡πÉ‡∏Å‡∏•‡πâ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô")

# ---------------------- Get OpenWeather Reference ----------------------
def get_openweather(province):
    try:
        api_key = st.secrets["OPENWEATHER_API"]
        url = f"https://api.openweathermap.org/data/2.5/weather?q={province},TH&appid={api_key}&units=metric"
        res = requests.get(url)
        data = res.json()
        return {
            "Temp": data["main"]["temp"],
            "RH": data["main"]["humidity"],
            "WS": data["wind"]["speed"]
        }
    except:
        return {"Temp": 27.0, "RH": 65.0, "WS": 2.5}

ref_data = get_openweather(province)

# ---------------------- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ----------------------
sit_options = {
    "‡πÅ‡∏î‡∏î": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡πÅ‡∏î‡∏î‡∏≠‡πà‡∏≠‡∏ô", "‡πÅ‡∏î‡∏î‡πÅ‡∏£‡∏á"],
    "‡∏•‡∏°": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏ô‡∏¥‡πà‡∏á/‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏°", "‡πÄ‡∏ö‡∏≤", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡πÅ‡∏£‡∏á"],
    "‡∏Å‡∏•‡∏¥‡πà‡∏ô": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô"],
    "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏´‡∏ô‡∏≤‡∏ß‡∏à‡∏±‡∏î", "‡∏´‡∏ô‡∏≤‡∏ß", "‡πÄ‡∏¢‡πá‡∏ô", "‡∏õ‡∏Å‡∏ï‡∏¥", "‡∏£‡πâ‡∏≠‡∏ô", "‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î"],
    "‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™", "‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô", "‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡∏Å"],
    "‡∏ù‡∏ô": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏ï‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", "‡∏ï‡∏Å‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å"],
    "‡∏≠‡∏∑‡πà‡∏ô‡πÜ": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏£‡∏ñ‡πÄ‡∏¢‡∏≠‡∏∞", "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏≤‡∏Ç‡∏¢‡∏∞"]
}

st.markdown("### üìå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
day_situations = []

for i in range(num_days):
    with st.expander(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i+1}"):
        day_sit = {}
        wind = st.selectbox(f"‡∏ó‡∏¥‡∏®‡∏•‡∏° (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i+1})", ["NE", "NW", "SE", "SW"], key=f"wind_{i}")
        day_sit["‡∏ó‡∏¥‡∏®‡∏•‡∏°"] = wind
        for key, options in sit_options.items():
            day_sit[key] = st.selectbox(f"{key} (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i+1})", options, key=f"{key}_{i}")
        day_situations.append(day_sit)

# ---------------------- SIMULATE ----------------------
def simulate(var, sit, hour, wind_dir):
    base = random.uniform(2, 6)
    multiplier = 1.0
    add = 0.0

    if sit.get("‡∏ù‡∏ô") in ["‡∏ï‡∏Å‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å"]: multiplier *= 0.6; add -= 1
    elif sit.get("‡∏ù‡∏ô") == "‡∏ï‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢": multiplier *= 0.85
    if sit.get("‡πÅ‡∏î‡∏î") == "‡πÅ‡∏î‡∏î‡πÅ‡∏£‡∏á": add += 4; multiplier *= 1.1
    elif sit.get("‡πÅ‡∏î‡∏î") == "‡πÅ‡∏î‡∏î‡∏≠‡πà‡∏≠‡∏ô": add += 2
    if sit.get("‡∏•‡∏°") == "‡πÅ‡∏£‡∏á": add += 3 if var == "WS" else 0; multiplier *= 0.7
    elif sit.get("‡∏•‡∏°") == "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á": add += 1.5 if var == "WS" else 0
    elif sit.get("‡∏•‡∏°") == "‡∏ô‡∏¥‡πà‡∏á/‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏°": multiplier *= 1.3; add -= 0.5
    if sit.get("‡∏Å‡∏•‡∏¥‡πà‡∏ô") == "‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô" and var in ["NO2", "SO2", "CO"]: multiplier *= 1.2
    if sit.get("‡∏≠‡∏∑‡πà‡∏ô‡πÜ") == "‡∏£‡∏ñ‡πÄ‡∏¢‡∏≠‡∏∞" and var in ["NO", "NO2", "CO"]: multiplier *= 1.4
    if sit.get("‡∏≠‡∏∑‡πà‡∏ô‡πÜ") == "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏≤‡∏Ç‡∏¢‡∏∞" and var in ["CO", "O3", "SO2"]: multiplier *= 1.3
    if near_road and var in ["NO", "NO2", "CO"]: multiplier *= 1.25
    if near_factory and wind_dir == factory_direction and var in ["NO2", "SO2"]: multiplier *= 1.5

    if var == "NO": return round(base * multiplier + add + random.uniform(0.5, 2.5), 2)
    if var == "NO2": return round(min(20, base * multiplier + add + random.uniform(0.8, 2.8)), 2)
    if var == "NOx": return None
    if var == "Temp": return round(ref_data.get("Temp", 27) + add + random.uniform(-2, 2), 2)
    if var == "RH": return round(ref_data.get("RH", 65) + add + random.uniform(-12, 15), 2)
    if var == "WS": return round(min(4, ref_data.get("WS", 2.5) + add + random.uniform(-1.5, 1.5)), 2)
    if var == "Pressure": return round(1010 + random.uniform(-6, 6), 2)
    if var == "SO2": return round(base * multiplier + add + random.uniform(0.6, 2.2), 2)
    if var == "CO": return round(base * multiplier + add + random.uniform(0.1, 1.0), 2)
    if var == "O3": return round(30 + add + random.uniform(5, 25), 2)

# ---------------------- GENERATE ----------------------
if st.button("üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel"):
    records = []
    for i in range(num_days):
        date = start_date + timedelta(days=i)
        sit = day_situations[i]
        wind_dir = sit.get("‡∏ó‡∏¥‡∏®‡∏•‡∏°", "NE")
        for hour in range(24):
            row = {
                "Date": date.strftime("%Y-%m-%d"),
                "Time": f"{hour:02d}:00:00",
                "WD": wind_dir
            }
            for param in params_to_calculate:
                if param == "NOx": continue
                row[param] = simulate(param, sit, hour, wind_dir)
            if "NO" in row and "NO2" in row and "NOx" in params_to_calculate:
                row["NOx"] = round(row["NO"] + row["NO2"], 2)
            records.append(row)

    df = pd.DataFrame(records)
    st.success(f"‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î {province} {'(‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å API)' if ref_data else '(‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏•‡∏≠‡∏á)'}")
    st.dataframe(df.head(48))

    file_name = f"AirCheck_{province}_{start_date.strftime('%Y%m%d')}_{(start_date + timedelta(days=num_days-1)).strftime('%Y%m%d')}.xlsx"
    output = BytesIO()
    df.to_excel(output, index=False)
    st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel", data=output.getvalue(), file_name=file_name)

