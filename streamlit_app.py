import streamlit as st
import pandas as pd
import requests
import random
from datetime import datetime, timedelta
from io import BytesIO

# ---------------------- CONFIG ----------------------
st.set_page_config(page_title="AirCheck TH", layout="wide")
st.image("logo.png", width=100)
st.title("üåç AirCheck TH - ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏•‡∏û‡∏¥‡∏©‡∏ö‡∏ô‡πÄ‡∏ß‡πá‡∏ö")

# ---------------------- LOGIN ----------------------
if "username" not in st.session_state:
    st.session_state.username = ""

if st.session_state.username == "":
    with st.form("login"):
        st.subheader("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
        username = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        submitted = st.form_submit_button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
        if submitted:
            st.session_state.username = username.strip()
            st.experimental_rerun()
    st.stop()

is_admin = st.session_state.username.lower() == "siwanon"
st.sidebar.success(f"üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {st.session_state.username} ({'admin' if is_admin else 'user'})")

# ---------------------- GET WEATHER DATA ----------------------
@st.cache_data(ttl=1800)
def get_weather_from_openweather(province):
    api_key = st.secrets["OPENWEATHER_API"]
    url = f"https://api.openweathermap.org/data/2.5/weather?q={province},TH&appid={api_key}&units=metric"
    try:
        res = requests.get(url)
        data = res.json()
        return {
            "Temp": data["main"]["temp"],
            "RH": data["main"]["humidity"],
            "WS": data["wind"]["speed"]
        }
    except:
        return None

# ---------------------- INPUT ----------------------
col1, col2 = st.columns(2)
with col1:
    province = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", ["Bangkok", "Rayong", "Ayutthaya", "Chonburi", "Ratchaburi", "Saraburi", "Chanthaburi"])
    start_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", datetime.today())
    num_days = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô", 1, 8, 3)
with col2:
    factory_direction = st.selectbox("‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô", ["NE", "NW", "SE", "SW"])
    near_road = st.checkbox("‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏ô‡∏ô")
    near_factory = st.checkbox("‡πÉ‡∏Å‡∏•‡πâ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô")

params = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì", [
    "NO", "NO2", "NOx", "SO2", "CO", "O3", "WS", "WD", "Temp", "RH", "Pressure"
], default=["NO", "NO2", "NOx", "WS", "WD", "Temp", "RH", "Pressure"])

weather_data = get_weather_from_openweather(province)
if weather_data:
    st.success(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å OpenWeather ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: Temp={weather_data['Temp']}¬∞C, RH={weather_data['RH']}%, WS={weather_data['WS']} m/s")
else:
    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OpenWeather ‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ó‡∏ô")
    weather_data = {"Temp": 27.0, "RH": 65.0, "WS": 2.5}

# ---------------------- DAILY SITUATIONS ----------------------
situations = []
sit_options = {
    "‡πÅ‡∏î‡∏î": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡πÅ‡∏î‡∏î‡∏≠‡πà‡∏≠‡∏ô", "‡πÅ‡∏î‡∏î‡πÅ‡∏£‡∏á"],
    "‡∏•‡∏°": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏ô‡∏¥‡πà‡∏á/‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏°", "‡πÄ‡∏ö‡∏≤", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡πÅ‡∏£‡∏á"],
    "‡∏ù‡∏ô": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏ï‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", "‡∏ï‡∏Å‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å"],
    "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏£‡πâ‡∏≠‡∏ô", "‡πÄ‡∏¢‡πá‡∏ô", "‡∏õ‡∏Å‡∏ï‡∏¥"],
    "‡∏Å‡∏•‡∏¥‡πà‡∏ô": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô"],
    "‡∏≠‡∏∑‡πà‡∏ô‡πÜ": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏£‡∏ñ‡πÄ‡∏¢‡∏≠‡∏∞", "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏≤‡∏Ç‡∏¢‡∏∞"]
}
st.markdown("### ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
for i in range(num_days):
    with st.expander(f"üìÜ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i+1}"):
        sit = {"‡∏ó‡∏¥‡∏®‡∏•‡∏°": st.selectbox(f"‡∏ó‡∏¥‡∏®‡∏•‡∏° (‡∏ß‡∏±‡∏ô {i+1})", ["NE", "NW", "SE", "SW"], key=f"wind_{i}")}
        for k, opts in sit_options.items():
            sit[k] = st.selectbox(f"{k} (‡∏ß‡∏±‡∏ô {i+1})", opts, key=f"{k}_{i}")
        situations.append(sit)

# ---------------------- SIMULATE FUNCTION ----------------------
def simulate(var, sit, hour, wd, fd):
    base = random.uniform(2, 6)
    m, a = 1.0, 0.0
    if sit["‡∏ù‡∏ô"] in ["‡∏ï‡∏Å‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å"]: m *= 0.6; a -= 1
    if sit["‡πÅ‡∏î‡∏î"] == "‡πÅ‡∏î‡∏î‡πÅ‡∏£‡∏á": m *= 1.1; a += 4
    if sit["‡πÅ‡∏î‡∏î"] == "‡πÅ‡∏î‡∏î‡∏≠‡πà‡∏≠‡∏ô": a += 2
    if sit["‡∏•‡∏°"] == "‡πÅ‡∏£‡∏á" and var == "WS": a += 2
    if sit["‡∏•‡∏°"] == "‡∏ô‡∏¥‡πà‡∏á/‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏°": m *= 1.2
    if sit["‡∏Å‡∏•‡∏¥‡πà‡∏ô"] == "‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô" and var in ["NO2", "SO2", "CO"]: m *= 1.2
    if sit["‡∏≠‡∏∑‡πà‡∏ô‡πÜ"] == "‡∏£‡∏ñ‡πÄ‡∏¢‡∏≠‡∏∞" and var in ["NO", "NO2", "CO"]: m *= 1.3
    if sit["‡∏≠‡∏∑‡πà‡∏ô‡πÜ"] == "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏≤‡∏Ç‡∏¢‡∏∞" and var in ["SO2", "CO", "O3"]: m *= 1.2
    if near_road and var in ["NO", "NO2", "CO"]: m *= 1.2
    if near_factory and wd == fd and var in ["NO2", "SO2"]: m *= 1.3

    if var == "NO": return round(base * m + a + random.uniform(0.3, 2.0), 2)
    if var == "NO2": return round(min(15, base * m + a + random.uniform(0.3, 2.0)), 2)
    if var == "NOx": return None
    if var == "Temp": return round(weather_data["Temp"] + a + random.uniform(-1, 1.5), 2)
    if var == "RH": return round(weather_data["RH"] + a + random.uniform(-10, 10), 2)
    if var == "WS": return round(min(4, weather_data["WS"] + a + random.uniform(-1.2, 1.2)), 2)
    if var == "Pressure": return round(1010 + random.uniform(-6, 6), 2)
    if var == "SO2": return round(base * m + a + random.uniform(0.2, 1.0), 2)
    if var == "CO": return round(base * m + a + random.uniform(0.1, 0.8), 2)
    if var == "O3": return round(30 + a + random.uniform(3, 18), 2)
    return round(base * m + a, 2)

# ---------------------- GENERATE + EXPORT ----------------------
if st.button("üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î"):
    records = []
    for i in range(num_days):
        date = start_date + timedelta(days=i)
        sit = situations[i]
        wd = sit["‡∏ó‡∏¥‡∏®‡∏•‡∏°"]
        for h in range(24):
            row = {
                "Date": date.strftime("%Y-%m-%d"),
                "Hour": f"{h:02d}:00:00",
                "WD": wd
            }
            no = simulate("NO", sit, h, wd, factory_direction) if "NO" in params else None
            no2 = simulate("NO2", sit, h, wd, factory_direction) if "NO2" in params else None
            nox = no + no2 if no is not None and no2 is not None and "NOx" in params else None
            for v in ["Temp", "RH", "WS", "Pressure", "SO2", "CO", "O3"]:
                if v in params: row[v] = simulate(v, sit, h, wd, factory_direction)
            row["NO"] = no
            row["NO2"] = no2
            row["NOx"] = nox
            row["Ref"] = "OpenWeather" if weather_data else "Simulated"
            records.append(row)
    df = pd.DataFrame(records)
    st.dataframe(df.head(48))

    # Export
    output = BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        df.to_excel(writer, index=False, sheet_name="AirCheck")
    fname = f"AirCheckTH_{province}_{start_date.strftime('%Y%m%d')}_{(start_date + timedelta(days=num_days-1)).strftime('%Y%m%d')}.xlsx"
    st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel", output.getvalue(), file_name=fname)

