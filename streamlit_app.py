import streamlit as st
import pandas as pd
import random
import requests
from datetime import datetime, timedelta
from io import BytesIO
import os

# ---------------- CONFIG ----------------
st.set_page_config(page_title="AirCheck TH", layout="wide", page_icon="static/logo.ico")

# --------------- LOGO + TITLE ----------------
st.image("static/logo.ico", width=60)
st.markdown("<h2>üåè AirCheck TH - Web Version</h2>", unsafe_allow_html=True)

# -------------- Login ----------------
if "user" not in st.session_state:
    st.session_state.user = ""
    st.session_state.role = ""

if st.session_state.user == "":
    st.markdown("### üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    user_input = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    if st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
        st.session_state.user = user_input
        st.session_state.role = "admin" if user_input.lower() == "siwanon" else "user"

        # Log login
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open("user_log.csv", "a", encoding="utf-8") as f:
            f.write(f"{now},{user_input},{st.session_state.role}\n")
        st.experimental_set_query_params(login="1")
        st.experimental_rerun()
    st.stop()

# -------------- Header Info ----------------
st.sidebar.success(f"üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: {st.session_state.user} ({st.session_state.role})")
if st.session_state.role == "admin":
    st.sidebar.markdown("üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
    try:
        df_log = pd.read_csv("user_log.csv", names=["‡πÄ‡∏ß‡∏•‡∏≤", "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", "‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå"])
        st.sidebar.dataframe(df_log.tail(10), use_container_width=True)
    except:
        st.sidebar.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥")

# -------------- Input Parameters ----------------
col1, col2 = st.columns(2)
with col1:
    start_date = st.date_input("üìÜ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", datetime.today())
    num_days = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô", 1, 8, 3)
    factory_dir = st.selectbox("‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô", ["NE", "NW", "SE", "SW"])
with col2:
    st.markdown("### üèôÔ∏è ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    province = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", [
        "‡∏£‡∏∞‡∏¢‡∏≠‡∏á", "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£", "‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤", "‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ", "‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ", "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ", "‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ"
    ])
    st.markdown("### üåø ‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°")
    near_road = st.checkbox("‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏ô‡∏ô")
    near_factory = st.checkbox("‡πÉ‡∏Å‡∏•‡πâ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô")

params_selected = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì", [
    "NO", "NO2", "NOx", "SO2", "CO", "O3", "WS", "WD", "Temp", "RH", "Pressure"
], default=["NO", "NO2", "NOx", "WS", "WD", "Temp", "RH", "Pressure"])

# -------------- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ----------------
sit_options = {
    "‡πÅ‡∏î‡∏î": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡πÅ‡∏î‡∏î‡∏≠‡πà‡∏≠‡∏ô", "‡πÅ‡∏î‡∏î‡πÅ‡∏£‡∏á"],
    "‡∏•‡∏°": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏ô‡∏¥‡πà‡∏á/‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏°", "‡πÄ‡∏ö‡∏≤", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡πÅ‡∏£‡∏á"],
    "‡∏Å‡∏•‡∏¥‡πà‡∏ô": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô"],
    "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏´‡∏ô‡∏≤‡∏ß‡∏à‡∏±‡∏î", "‡∏´‡∏ô‡∏≤‡∏ß", "‡πÄ‡∏¢‡πá‡∏ô", "‡∏õ‡∏Å‡∏ï‡∏¥", "‡∏£‡πâ‡∏≠‡∏ô", "‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î"],
    "‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™", "‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô", "‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡∏Å"],
    "‡∏ù‡∏ô": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏ï‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", "‡∏ï‡∏Å‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å"],
    "‡∏≠‡∏∑‡πà‡∏ô‡πÜ": ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "‡∏£‡∏ñ‡πÄ‡∏¢‡∏≠‡∏∞", "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏≤‡∏Ç‡∏¢‡∏∞"]
}

st.markdown("### üå¶Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
day_situations = []
for i in range(num_days):
    with st.expander(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i+1}"):
        sit = {"‡∏ó‡∏¥‡∏®‡∏•‡∏°": st.selectbox(f"‡∏ó‡∏¥‡∏®‡∏•‡∏° (‡∏ß‡∏±‡∏ô {i+1})", ["NE", "NW", "SE", "SW"], key=f"wd_{i}")}
        for key, opts in sit_options.items():
            sit[key] = st.selectbox(f"{key} (‡∏ß‡∏±‡∏ô {i+1})", opts, key=f"{key}_{i}")
        day_situations.append(sit)

# -------------- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ----------------
def fetch_openweather(province):
    url = f"https://api.openweathermap.org/data/2.5/weather?q={province},TH&appid=api = st.secrets["OPENWEATHER_API"]
&units=metric"
    try:
        res = requests.get(url, timeout=10).json()
        return {
            "Temp": res["main"]["temp"],
            "RH": res["main"]["humidity"],
            "WS": res["wind"].get("speed", 2.0)
        }
    except:
        return {"Temp": 27, "RH": 65, "WS": 2.5}

open_ref = fetch_openweather(province)

# -------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á ----------------
def simulate(var, sit, wind_dir):
    base = random.uniform(2, 6)
    add, mul = 0.0, 1.0

    if sit["‡∏ù‡∏ô"] in ["‡∏ï‡∏Å‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å"]: mul *= 0.6; add -= 1
    if sit["‡∏ù‡∏ô"] == "‡∏ï‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢": mul *= 0.85
    if sit["‡πÅ‡∏î‡∏î"] == "‡πÅ‡∏î‡∏î‡πÅ‡∏£‡∏á": add += 4; mul *= 1.1
    if sit["‡πÅ‡∏î‡∏î"] == "‡πÅ‡∏î‡∏î‡∏≠‡πà‡∏≠‡∏ô": add += 2
    if sit["‡∏•‡∏°"] == "‡πÅ‡∏£‡∏á": mul *= 0.7; add += 1.5 if var == "WS" else 0
    if sit["‡∏•‡∏°"] == "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á": add += 1 if var == "WS" else 0
    if sit["‡∏•‡∏°"] == "‡∏ô‡∏¥‡πà‡∏á/‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏°": mul *= 1.3
    if sit["‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥"] == "‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î" and var == "Temp": add += 4
    if sit["‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥"] == "‡∏´‡∏ô‡∏≤‡∏ß‡∏à‡∏±‡∏î" and var == "Temp": add -= 4
    if sit["‡∏Å‡∏•‡∏¥‡πà‡∏ô"] == "‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô" and var in ["NO2", "SO2", "CO"]: mul *= 1.2
    if sit["‡∏≠‡∏∑‡πà‡∏ô‡πÜ"] == "‡∏£‡∏ñ‡πÄ‡∏¢‡∏≠‡∏∞" and var in ["NO", "NO2", "CO"]: mul *= 1.4
    if sit["‡∏≠‡∏∑‡πà‡∏ô‡πÜ"] == "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏≤‡∏Ç‡∏¢‡∏∞" and var in ["CO", "O3", "SO2"]: mul *= 1.3
    if near_road and var in ["NO", "NO2", "CO"]: mul *= 1.25
    if near_factory and wind_dir == factory_dir and var in ["NO2", "SO2"]: mul *= 1.5

    if var == "NO": return round(base * mul + add + random.uniform(0.5, 2.5), 2)
    if var == "NO2": return round(min(20, base * mul + add + random.uniform(0.8, 2.8)), 2)
    if var == "NOx": return None
    if var == "Temp": return round(open_ref["Temp"] + add + random.uniform(-2, 2), 2)
    if var == "RH": return round(open_ref["RH"] + random.uniform(-12, 15), 2)
    if var == "WS": return round(min(4, open_ref["WS"] + random.uniform(-1.5, 1.5)), 2)
    if var == "Pressure": return round(1010 + random.uniform(-6, 6), 2)
    if var == "SO2": return round(base * mul + add + random.uniform(0.6, 2.2), 2)
    if var == "CO": return round(base * mul + add + random.uniform(0.1, 1.0), 2)
    if var == "O3": return round(30 + add + random.uniform(5, 25), 2)
    return 0

# -------------- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• + Excel ----------------
if st.button("üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel"):
    data = []
    for i in range(num_days):
        date = start_date + timedelta(days=i)
        sit = day_situations[i]
        wind = sit["‡∏ó‡∏¥‡∏®‡∏•‡∏°"]
        for h in range(24):
            row = {
                "Date": date.strftime("%Y-%m-%d"),
                "Time": f"{h:02d}:00:00",
                "WD": wind
            }
            no = simulate("NO", sit, wind) if "NO" in params_selected else None
            no2 = simulate("NO2", sit, wind) if "NO2" in params_selected else None
            row.update({
                "NO": no, "NO2": no2,
                "NOx": no + no2 if (no is not None and no2 is not None and "NOx" in params_selected) else None
            })
            for p in ["Temp", "RH", "WS", "Pressure", "SO2", "CO", "O3"]:
                if p in params_selected:
                    row[p] = simulate(p, sit, wind)
            data.append(row)

    df = pd.DataFrame(data)
    st.success("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    st.dataframe(df.head(48))

    output = BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as w:
        if any(p in df.columns for p in ["NO", "NO2", "NOx"]):
            df[["Date", "Time", "NO", "NO2", "NOx"]].to_excel(w, index=False, sheet_name="NOx Group")
        df_env = df[["Date", "Time", "WS", "WD", "Temp", "RH", "Pressure"]].copy()
        df_env["WD_degree"] = [
            f'=IF(D{i+2}="NE",RANDBETWEEN(0,90),IF(D{i+2}="SE",RANDBETWEEN(91,180),IF(D{i+2}="SW",RANDBETWEEN(181,270),RANDBETWEEN(271,359))))'
            for i in range(len(df_env))
        ]
        df_env.to_excel(w, index=False, sheet_name="ENV")
        for p in ["SO2", "CO", "O3"]:
            if p in df.columns:
                df[["Date", "Time", p]].to_excel(w, index=False, sheet_name=p)

    filename = f"AirCheck_{province}_{start_date.strftime('%Y%m%d')}_{(start_date + timedelta(days=num_days-1)).strftime('%Y%m%d')}.xlsx"
    st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel", data=output.getvalue(), file_name=filename)
